/*
===============================================================================
AI FILTER QUERIES - Generated SQL Examples
===============================================================================
Purpose: Demonstrate the actual SQL queries generated by the AI_FILTER procedures
to help agents understand how natural language predicates are transformed into
Snowflake AI function calls.

Documentation: https://docs.snowflake.com/en/sql-reference/functions/ai_filter
===============================================================================
*/

/*
===============================================================================
EXAMPLE 1: SINGLE PREDICATE FILTERING
===============================================================================
When you call:
CALL FILTER_AND_SHOW(
    'PHANTOM_SEC_POC.SI.GONG_CLEAN_TRANSCRIPTS',
    'CALL_ID',
    'CHRONOLOGICAL_TRANSCRIPT',
    'Is this conversation discussing pricing, budget, or costs?',
    'PHANTOM_SEC_POC.SI.PRICING_DISCUSSIONS',
    10
);

The procedure generates this SQL:
===============================================================================
*/

CREATE OR REPLACE TABLE PHANTOM_SEC_POC.SI.PRICING_DISCUSSIONS AS
SELECT 
    CALL_ID as record_id,
    LEFT(CHRONOLOGICAL_TRANSCRIPT, 500) as text_preview,
    AI_FILTER(CONCAT('Is this conversation discussing pricing, budget, or costs? ', CHRONOLOGICAL_TRANSCRIPT)) as meets_criteria,
    'Is this conversation discussing pricing, budget, or costs?' as filter_used,
    CURRENT_TIMESTAMP() as filtered_at
FROM (SELECT * FROM PHANTOM_SEC_POC.SI.GONG_CLEAN_TRANSCRIPTS LIMIT 10);

/*
Key Points:
1. AI_FILTER requires CONCAT to combine the predicate question with the text
2. The predicate is prepended to the text content with a space
3. Result is a boolean (TRUE/FALSE) indicating if text meets the criteria
4. LIMIT is applied via subquery for better performance
5. Preview column shows first 500 chars for readability
*/

-- To see results after the procedure runs:
SELECT * FROM PHANTOM_SEC_POC.SI.PRICING_DISCUSSIONS
WHERE meets_criteria = TRUE;

/*
===============================================================================
EXAMPLE 2: MULTIPLE PREDICATES WITH PROMPT FUNCTION
===============================================================================
When using multiple filters with the updated PROMPT pattern:

CALL MULTI_FILTER_AND_SHOW(
    'PHANTOM_SEC_POC.SI.GONG_CLEAN_TRANSCRIPTS',
    'CALL_ID',
    'CHRONOLOGICAL_TRANSCRIPT',
    'Is this about pricing?|Does customer seem interested?|Are there technical questions?',
    'PHANTOM_SEC_POC.SI.CALL_ANALYSIS',
    10
);

The procedure generates this SQL:
===============================================================================
*/

CREATE OR REPLACE TABLE PHANTOM_SEC_POC.SI.CALL_ANALYSIS AS
SELECT 
    CALL_ID as record_id,
    LEFT(CHRONOLOGICAL_TRANSCRIPT, 300) as text_preview,
    AI_FILTER(PROMPT('Is this about pricing? {0}', CHRONOLOGICAL_TRANSCRIPT)) as filter_1,
    AI_FILTER(PROMPT('Does customer seem interested? {0}', CHRONOLOGICAL_TRANSCRIPT)) as filter_2,
    AI_FILTER(PROMPT('Are there technical questions? {0}', CHRONOLOGICAL_TRANSCRIPT)) as filter_3,
    CURRENT_TIMESTAMP() as analyzed_at
FROM (SELECT * FROM PHANTOM_SEC_POC.SI.GONG_CLEAN_TRANSCRIPTS LIMIT 10);

/*
Key Points:
1. Each predicate becomes a separate column (filter_1, filter_2, etc.)
2. PROMPT function uses {0} placeholder for the text field
3. This allows checking multiple conditions in a single pass
4. Results show which filters each record matches
*/

-- Analysis queries after running:
-- Find records matching ALL filters
SELECT record_id, text_preview
FROM PHANTOM_SEC_POC.SI.CALL_ANALYSIS
WHERE filter_1 = TRUE 
  AND filter_2 = TRUE 
  AND filter_3 = TRUE;

-- Count matches per filter
SELECT 
    SUM(CASE WHEN filter_1 THEN 1 ELSE 0 END) as pricing_mentions,
    SUM(CASE WHEN filter_2 THEN 1 ELSE 0 END) as interested_customers,
    SUM(CASE WHEN filter_3 THEN 1 ELSE 0 END) as technical_questions,
    COUNT(*) as total_records
FROM PHANTOM_SEC_POC.SI.CALL_ANALYSIS;

/*
===============================================================================
EXAMPLE 3: MULTI-COLUMN FILTERING WITH PROMPT TEMPLATE
===============================================================================
When filtering across multiple columns:

CALL MULTI_COLUMN_FILTER_AND_SHOW(
    'PHANTOM_SEC_POC.SI.GONG_CLEAN_TRANSCRIPTS',
    'CALL_ID',
    'PARTICIPANTS, TOPICS_DISCUSSED, COMPANY_DOMAINS',
    '{0} includes executives AND {1} mentions security compliance AND {2} contains .com domain',
    'PHANTOM_SEC_POC.SI.EXECUTIVE_SECURITY_CALLS',
    10
);

The procedure generates this SQL:
===============================================================================
*/

CREATE OR REPLACE TABLE PHANTOM_SEC_POC.SI.EXECUTIVE_SECURITY_CALLS AS
SELECT 
    CALL_ID as record_id,
    LEFT(PARTICIPANTS, 200) as PARTICIPANTS_preview,
    LEFT(TOPICS_DISCUSSED, 200) as TOPICS_DISCUSSED_preview,
    LEFT(COMPANY_DOMAINS, 200) as COMPANY_DOMAINS_preview,
    AI_FILTER(PROMPT('{0} includes executives AND {1} mentions security compliance AND {2} contains .com domain', 
                     PARTICIPANTS, TOPICS_DISCUSSED, COMPANY_DOMAINS)) as meets_criteria,
    '{0} includes executives AND {1} mentions security compliance AND {2} contains .com domain' as filter_template_used,
    CURRENT_TIMESTAMP() as filtered_at
FROM (SELECT * FROM PHANTOM_SEC_POC.SI.GONG_CLEAN_TRANSCRIPTS LIMIT 10);

/*
Key Points:
1. PROMPT function replaces {0}, {1}, {2} with actual column values
2. Complex logical conditions can be expressed naturally
3. Multiple columns are evaluated together in context
4. Preview columns help understand what was evaluated
*/

/*
===============================================================================
COMMON PATTERNS AND BEST PRACTICES
===============================================================================
*/

-- 1. Negative filtering (find what's NOT mentioned)
SELECT 
    CALL_ID,
    CHRONOLOGICAL_TRANSCRIPT,
    AI_FILTER(CONCAT('Does this conversation NOT mention any competitors? ', CHRONOLOGICAL_TRANSCRIPT)) as no_competitors
FROM PHANTOM_SEC_POC.SI.GONG_CLEAN_TRANSCRIPTS
WHERE AI_FILTER(CONCAT('Does this conversation NOT mention any competitors? ', CHRONOLOGICAL_TRANSCRIPT)) = TRUE
LIMIT 10;

-- 2. Combining AI_FILTER with other conditions
SELECT 
    CALL_ID,
    DURATION_MINUTES,
    CHRONOLOGICAL_TRANSCRIPT
FROM PHANTOM_SEC_POC.SI.GONG_CLEAN_TRANSCRIPTS
WHERE DURATION_MINUTES > 30
  AND AI_FILTER(CONCAT('Is the customer showing strong buying signals? ', CHRONOLOGICAL_TRANSCRIPT)) = TRUE
LIMIT 5;

-- 3. Using AI_FILTER in CASE statements for categorization
SELECT 
    CALL_ID,
    CASE 
        WHEN AI_FILTER(CONCAT('Is this an initial discovery call? ', CHRONOLOGICAL_TRANSCRIPT)) THEN 'Discovery'
        WHEN AI_FILTER(CONCAT('Is this a product demo? ', CHRONOLOGICAL_TRANSCRIPT)) THEN 'Demo'
        WHEN AI_FILTER(CONCAT('Is this a negotiation or pricing discussion? ', CHRONOLOGICAL_TRANSCRIPT)) THEN 'Negotiation'
        WHEN AI_FILTER(CONCAT('Is this a support or issue resolution call? ', CHRONOLOGICAL_TRANSCRIPT)) THEN 'Support'
        ELSE 'Other'
    END as call_type,
    LEFT(CHRONOLOGICAL_TRANSCRIPT, 200) as preview
FROM PHANTOM_SEC_POC.SI.GONG_CLEAN_TRANSCRIPTS
LIMIT 20;

/*
===============================================================================
PERFORMANCE CONSIDERATIONS
===============================================================================

1. LIMIT USAGE:
   - Always use LIMIT during testing to control costs
   - AI functions consume compute credits based on text length

2. TEXT LENGTH:
   - Longer texts take more time and credits to process
   - Consider using LEFT() to analyze only relevant portions

3. BATCH PROCESSING:
   - Multiple filters in one query is more efficient than separate queries
   - Use MULTI_FILTER_AND_SHOW for bulk analysis

4. RESULT CACHING:
   - Store results in tables for reuse
   - Avoid re-running same filters on same data

5. PREDICATE CLARITY:
   - Clear, specific questions yield better results
   - Avoid ambiguous or overly complex predicates
===============================================================================
*/